// <auto-generated />
using System;
using BlogService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogService.Infrastructure.Migrations
{
    [DbContext(typeof(BlogServiceDbContext))]
    [Migration("20240517202009_Update_HeartRecord")]
    partial class Update_HeartRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BlogService.Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateOnTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HeartCount")
                        .HasColumnType("int");

                    b.Property<string>("PreviewPhoto")
                        .HasColumnType("longtext");

                    b.Property<int>("StartCount")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("blog_blogs", (string)null);
                });

            modelBuilder.Entity("BlogService.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<DateTime>("CreateOnTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HighestCommentId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("StarCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId", "BlogId", "ParentId", "HighestCommentId");

                    b.ToTable("blog_comment", (string)null);
                });

            modelBuilder.Entity("BlogService.Domain.Entities.HeartRecord", b =>
                {
                    b.Property<DateTime>("CreateOnTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("HaveRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.ToTable("blog_heart_record", (string)null);
                });

            modelBuilder.Entity("BlogService.Domain.Entities.Comment", b =>
                {
                    b.HasOne("BlogService.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogService.Domain.Entities.Comment", "ParentComment")
                        .WithMany("ChildrenComments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blog");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("BlogService.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogService.Domain.Entities.Comment", b =>
                {
                    b.Navigation("ChildrenComments");
                });
#pragma warning restore 612, 618
        }
    }
}
